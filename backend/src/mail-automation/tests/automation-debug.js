/**
 * Script de d√©bogage pour analyser le syst√®me d'automatisation d'emails
 * Ce script teste tous les composants du syst√®me d'automatisation
 * 
 * Usage: node automation-debug.js
 */

const { execSync } = require('child_process');

// Configuration de test
const TEST_CONFIG = {
  baseUrl: 'http://localhost:3001',
  testProjectId: null, // √Ä remplir avec un vrai ID de projet
  testCandidateName: 'Test Debug Candidate',
  testEmail: 'debug@test.com'
};

console.log('üîç DIAGNOSTIC DU SYST√àME D\'AUTOMATISATION D\'EMAILS');
console.log('====================================================\n');

// 1. Test de connexion √† l'API
async function testApiConnection() {
  console.log('1Ô∏è‚É£ Test de connexion √† l\'API...');
  try {
    const response = await fetch(`${TEST_CONFIG.baseUrl}/health`);
    if (response.ok) {
      console.log('‚úÖ API accessible');
      return true;
    } else {
      console.log('‚ùå API non accessible:', response.status);
      return false;
    }
  } catch (error) {
    console.log('‚ùå Erreur de connexion API:', error.message);
    return false;
  }
}

// 2. V√©rifier les automatisations configur√©es
async function checkAutomations() {
  console.log('\n2Ô∏è‚É£ V√©rification des automatisations configur√©es...');
  try {
    // Cette route devrait exister dans votre API
    const response = await fetch(`${TEST_CONFIG.baseUrl}/mail-automation`);
    if (response.ok) {
      const automations = await response.json();
      console.log(`‚úÖ ${automations.length} automatisations trouv√©es`);
      
      // Analyser les automatisations
      automations.forEach((auto, index) => {
        console.log(`  ${index + 1}. ${auto.title}`);
        console.log(`     - Entit√©: ${auto.entity_type}`);
        console.log(`     - D√©clencheur: ${auto.trigger_event}`);
        console.log(`     - Active: ${auto.is_active ? '‚úÖ' : '‚ùå'}`);
        console.log(`     - Conditions: ${auto.conditions?.length || 0}`);
      });
      
      return automations;
    } else {
      console.log('‚ùå Impossible de r√©cup√©rer les automatisations');
      return [];
    }
  } catch (error) {
    console.log('‚ùå Erreur lors de la v√©rification des automatisations:', error.message);
    return [];
  }
}

// 3. Tester l'AutomationSubscriber via les logs
function checkSubscriberLogs() {
  console.log('\n3Ô∏è‚É£ Analyse des logs TypeORM Subscriber...');
  
  // Instructions pour l'utilisateur
  console.log('üìã V√©rifiez les logs de votre application pour ces messages:');
  console.log('   - "üîß AutomationSubscriber constructor called"');
  console.log('   - "üîß DataSource available: true"');
  console.log('   - "üîß afterInsert called" lors de cr√©ation d\'entit√©');
  console.log('   - "üéØ Auto-triggering CANDIDATE ON_CREATE automation"');
  console.log('\n‚ö†Ô∏è  Si ces logs n\'apparaissent pas, le Subscriber n\'est pas correctement enregistr√©.\n');
}

// 4. V√©rifier la configuration du module
async function checkModuleConfiguration() {
  console.log('4Ô∏è‚É£ Points de v√©rification de la configuration du module:');
  
  const checks = [
    {
      name: 'AutomationSubscriber dans MailAutomationModule',
      description: 'V√©rifiez que AutomationSubscriber est dans les providers du module'
    },
    {
      name: 'SubscribersModule import√© dans AppModule',
      description: 'Le module SubscribersModule doit √™tre import√© dans AppModule'
    },
    {
      name: 'TypeORM Subscribers configuration',
      description: 'subscribers: [AutomationSubscriber] dans TypeOrmModule.forRoot()'
    },
    {
      name: 'AutomationTriggerService disponible',
      description: 'Le service AutomationTriggerService doit √™tre injectable'
    }
  ];

  checks.forEach((check, index) => {
    console.log(`   ${index + 1}. ${check.name}`);
    console.log(`      üìù ${check.description}`);
  });
}

// 5. Test manuel de cr√©ation de candidat
async function testCandidateCreation() {
  console.log('\n5Ô∏è‚É£ Test de cr√©ation de candidat (simulation)...');
  
  if (!TEST_CONFIG.testProjectId) {
    console.log('‚ö†Ô∏è  Configurez TEST_CONFIG.testProjectId avec un ID de projet valide pour tester la cr√©ation');
    return;
  }

  try {
    // Simuler la cr√©ation d'un candidat via l'API publique
    const formData = new FormData();
    formData.append('name', TEST_CONFIG.testCandidateName);
    formData.append('email', TEST_CONFIG.testEmail);
    formData.append('phone', '+33123456789');

    // Cr√©er un faux fichier PDF pour le test
    const fakeCV = new Blob(['Test CV content'], { type: 'application/pdf' });
    formData.append('cv', fakeCV, 'test-cv.pdf');

    console.log('üì§ Envoi de la candidature de test...');
    console.log(`   Nom: ${TEST_CONFIG.testCandidateName}`);
    console.log(`   Email: ${TEST_CONFIG.testEmail}`);
    console.log('   CV: test-cv.pdf');

    const response = await fetch(`${TEST_CONFIG.baseUrl}/projects/${TEST_CONFIG.testProjectId}/apply`, {
      method: 'POST',
      body: formData
    });

    if (response.ok) {
      const result = await response.json();
      console.log('‚úÖ Candidature cr√©√©e avec succ√®s:', result.candidateId);
      console.log('   üîç Surveillez maintenant les logs pour voir si l\'automatisation se d√©clenche');
      return result.candidateId;
    } else {
      const error = await response.text();
      console.log('‚ùå Erreur lors de la cr√©ation:', error);
    }
  } catch (error) {
    console.log('‚ùå Erreur lors du test de candidature:', error.message);
  }
}

// 6. V√©rifier les services de mail
async function checkMailServices() {
  console.log('\n6Ô∏è‚É£ V√©rification des services de mail...');
  
  const services = [
    'MailService (mail-configuration/mail.service.ts)',
    'MailAutomationService (mail-automation/services/mail-automation.service.ts)',
    'AutomationTriggerService (mail-automation/services/automation-trigger.service.ts)',
    'ConditionEvaluatorService (mail-automation/services/condition-evaluator.service.ts)'
  ];

  console.log('üìã Services requis pour le fonctionnement:');
  services.forEach((service, index) => {
    console.log(`   ${index + 1}. ${service}`);
  });

  console.log('\nüîß V√©rifiez que tous ces services sont correctement inject√©s et disponibles');
}

// 7. Script de diagnostic complet
async function runDiagnostic() {
  console.log('üöÄ D√©but du diagnostic...\n');

  // Tests s√©quentiels
  const apiOk = await testApiConnection();
  if (!apiOk) {
    console.log('\n‚ùå Diagnostic arr√™t√© - API non accessible');
    return;
  }

  const automations = await checkAutomations();
  
  checkSubscriberLogs();
  checkModuleConfiguration();
  await checkMailServices();
  
  if (automations.length === 0) {
    console.log('\n‚ö†Ô∏è  PROBL√àME D√âTECT√â: Aucune automatisation configur√©e');
    console.log('   Solution: Cr√©ez au moins une automatisation pour les candidats avec le d√©clencheur ON_CREATE');
  }

  // Test optionnel de cr√©ation de candidat
  await testCandidateCreation();

  // R√©sum√© des actions √† effectuer
  console.log('\nüìã ACTIONS DE D√âBOGAGE RECOMMAND√âES:');
  console.log('=====================================');
  console.log('1. V√©rifiez les logs de l\'application pour les messages du Subscriber');
  console.log('2. Assurez-vous qu\'au moins une automatisation est configur√©e et active');
  console.log('3. V√©rifiez que tous les modules sont correctement import√©s');
  console.log('4. Testez la cr√©ation d\'un candidat et surveillez les logs');
  console.log('5. V√©rifiez la configuration du service de mail');
  
  console.log('\nüí° ASTUCE: Activez les logs d√©taill√©s en d√©finissant LOG_LEVEL=debug dans votre .env');
}

// Fonction d'assistance pour g√©n√©rer des donn√©es de test
function generateTestData() {
  console.log('\nüß™ G√âN√âRATION DE DONN√âES DE TEST');
  console.log('================================');
  
  const testAutomation = {
    title: 'Test - Nouvelle candidature re√ßue',
    description: 'Automatisation de test pour d√©boguer le syst√®me',
    entity_type: 'CANDIDATE',
    trigger_event: 'ON_CREATE',
    is_active: true,
    recipients: ['debug@test.com'],
    mail_template: {
      subject: 'Test - Nouvelle candidature: {{name}}',
      html_content: '<h1>Test automatisation</h1><p>Candidat: {{name}}</p><p>Email: {{email}}</p>',
      text_content: 'Test automatisation - Candidat: {{name}} - Email: {{email}}'
    },
    conditions: [], // Aucune condition pour simplifier le test
    template_variables: {
      company_name: 'Soci√©t√© Test'
    }
  };

  console.log('üìù Automatisation de test √† cr√©er via API POST /mail-automation:');
  console.log(JSON.stringify(testAutomation, null, 2));
}

// Point d'entr√©e principal
async function main() {
  try {
    await runDiagnostic();
    generateTestData();
    
    console.log('\n‚ú® Diagnostic termin√©!');
    console.log('   Consultez les r√©sultats ci-dessus pour identifier les probl√®mes.');
  } catch (error) {
    console.error('\nüí• Erreur lors du diagnostic:', error);
  }
}

// Configuration pour Node.js
if (typeof window === 'undefined') {
  // Polyfill fetch pour Node.js si n√©cessaire
  if (typeof fetch === 'undefined') {
    console.log('‚ö†Ô∏è  fetch non disponible. Installez node-fetch ou utilisez Node.js 18+');
  }
  
  // Ex√©cuter le diagnostic
  main();
} else {
  console.log('üíª Ce script peut √™tre ex√©cut√© dans la console du navigateur ou avec Node.js');
}