/**
 * Script de test simple pour v√©rifier le syst√®me d'automatisation
 * Execute avec: node test-automation.js
 */

const baseUrl = 'http://localhost:3001/api';

async function testAutomation() {
  console.log('üöÄ Test du syst√®me d\'automatisation...\n');

  try {
    // 1. V√©rifier si l'API est accessible
    console.log('1. Test de connexion API...');
    const testResponse = await fetch(`${baseUrl}/mail-automation`).catch(() => null);
    
    if (!testResponse) {
      console.log('‚ùå API non accessible. V√©rifiez que le serveur backend est d√©marr√© sur le port 3001');
      return;
    }
    console.log('‚úÖ API accessible\n');

    // 2. Lister les automatisations existantes
    console.log('2. V√©rification des automatisations...');
    try {
      const automationsResponse = await fetch(`${baseUrl}/mail-automation`);
      if (automationsResponse.ok) {
        const automations = await automationsResponse.json();
        console.log(`‚úÖ ${automations.length} automatisations trouv√©es`);
        
        if (automations.length === 0) {
          console.log('‚ö†Ô∏è  PROBL√àME: Aucune automatisation configur√©e!');
          console.log('   Solution: Cr√©ez une automatisation avec le d√©clencheur ON_CREATE pour les candidats\n');
        } else {
          automations.forEach(auto => {
            console.log(`   - ${auto.title} (${auto.entity_type} ${auto.trigger_event}) ${auto.is_active ? '‚úÖ' : '‚ùå'}`);
          });
        }
      }
    } catch (error) {
      console.log('‚ùå Erreur lors de la r√©cup√©ration des automatisations:', error.message);
    }

    // 3. Test de r√©cup√©ration des projets actifs
    console.log('\n3. R√©cup√©ration des projets actifs...');
    try {
      const projectsResponse = await fetch(`${baseUrl}/projects/job-offers`);
      if (projectsResponse.ok) {
        const projects = await projectsResponse.json();
        console.log(`‚úÖ ${projects.length} projets actifs trouv√©s`);
        
        if (projects.length > 0) {
          const testProject = projects[0];
          console.log(`   Premier projet: ${testProject.name} (ID: ${testProject.id})`);
          
          // 4. Instructions pour le test manuel
          console.log('\n4. TEST MANUEL:');
          console.log('================');
          console.log('Ouvrez votre navigateur et allez √†:');
          console.log(`http://localhost:3000/apply/${testProject.id}`);
          console.log('\nSoumettez une candidature de test et surveillez les logs du backend.');
          console.log('Vous devriez voir ces messages:');
          console.log('- "üîß afterInsert called"');
          console.log('- "üéØ Auto-triggering CANDIDATE ON_CREATE automation"');
          console.log('- "‚úÖ Successfully triggered CANDIDATE ON_CREATE automation"');
          
        } else {
          console.log('‚ùå Aucun projet actif trouv√© pour le test');
        }
      }
    } catch (error) {
      console.log('‚ùå Erreur lors de la r√©cup√©ration des projets:', error.message);
    }

    // 5. Diagnostic des logs
    console.log('\n5. DIAGNOSTIC DES LOGS:');
    console.log('=======================');
    console.log('Surveillez les logs de votre application Node.js pour:');
    console.log('');
    console.log('‚úÖ SI TOUT FONCTIONNE, vous verrez:');
    console.log('   - "üîß AutomationSubscriber constructor called"');
    console.log('   - "üîß afterInsert called" lors de cr√©ations');
    console.log('   - "üéØ Auto-triggering..." messages');
    console.log('   - Messages d\'envoi d\'email');
    console.log('');
    console.log('‚ùå SI √áA NE FONCTIONNE PAS, vous verrez:');
    console.log('   - Pas de messages "üîß" du Subscriber');
    console.log('   - Seulement: "üìß Automation triggers will be executed automatically"');
    console.log('   - Pas d\'emails envoy√©s');

    // 6. Solutions possibles
    console.log('\n6. SOLUTIONS SI LE SUBSCRIBER NE FONCTIONNE PAS:');
    console.log('================================================');
    console.log('Option A - Forcer l\'enregistrement du subscriber:');
    console.log('   Modifiez app.module.ts ligne 33 pour:');
    console.log('   subscribers: [AutomationSubscriber],');
    console.log('');
    console.log('Option B - R√©activer les appels manuels:');
    console.log('   D√©commentez les lignes dans projects.service.ts:508-510');
    console.log('   Et r√©importez AutomationTriggerService');
    console.log('');
    console.log('Option C - V√©rifier les logs d√©taill√©s:');
    console.log('   Ajoutez LOG_LEVEL=debug dans votre fichier .env');

  } catch (error) {
    console.log('üí• Erreur inattendue:', error.message);
  }
}

// Fonction utilitaire pour cr√©er une automatisation de test
function createTestAutomation() {
  console.log('\nüìã AUTOMATISATION DE TEST √Ä CR√âER');
  console.log('==================================');
  console.log('Utilisez cette configuration pour cr√©er une automatisation via l\'API:');
  console.log('');
  console.log('POST /mail-automation');
  console.log(JSON.stringify({
    title: 'Test - Nouvelle candidature',
    description: 'Email automatique lors d\'une nouvelle candidature',
    entity_type: 'CANDIDATE',
    trigger_event: 'ON_CREATE',
    is_active: true,
    recipients: ['test@example.com'], // Remplacez par votre email
    mail_template: {
      subject: 'Nouvelle candidature: {{name}}',
      html_content: '<h1>Nouvelle candidature re√ßue</h1><p>Nom: {{name}}</p><p>Email: {{email}}</p><p>Projet: {{project_name}}</p>',
      text_content: 'Nouvelle candidature - Nom: {{name}} - Email: {{email}} - Projet: {{project_name}}'
    },
    conditions: [],
    template_variables: {}
  }, null, 2));
}

// Point d'entr√©e
if (typeof fetch === 'undefined') {
  // Pour Node.js < 18
  console.log('‚ö†Ô∏è  Ce script n√©cessite Node.js 18+ ou l\'installation de node-fetch');
  console.log('Vous pouvez √©galement copier-coller ce code dans la console du navigateur');
} else {
  testAutomation().then(() => {
    createTestAutomation();
    console.log('\n‚ú® Test termin√©! Suivez les instructions ci-dessus pour d√©boguer.');
  });
}